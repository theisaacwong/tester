include "application.conf"

call-caching {
  enabled = false
  invalidate-bad-cache-results = true
}

system {
  # Cromwell will cap the number of running workflows at N
  max-concurrent-workflows = 25000

  io {
    # Throttle for GCS calls.
    number-of-requests = 10240611
    per = 100 seconds

    # Number of times an I/O operation should be attempted before giving up and failing it.
    number-of-attempts = 10
  }

  # increase input file limits
  input-read-limits {
    lines = 100000000
    tsv   = 100000000
  }

  # Cache file hashes within the scope of a root workflow to prevent repeatedly
  #  requesting the hashes of the same files multiple times.
  file-hash-cache = true

}

backend {
  default = "PAPIv2"
  providers {

    PAPIv2 {
      actor-factory = "cromwell.backend.google.pipelines.v2alpha1.PipelinesApiLifecycleActorFactory"
      config {
        // Google project
        project = "broad-jg-dev"

        // Base bucket for workflow executions
        root = "gs://jg-dev-hail-testing"

        # Set this to the lower of the two values "Queries per 100 seconds" and "Queries per 100 seconds per user" for
        # your project.
        #
        # Used to help determine maximum throughput to the Google Genomics API. Setting this value too low will
        # cause a drop in performance. Setting this value too high will cause QPS based locks from Google.
        # 1000 is the default "Queries per 100 seconds per user", 50000 is the default "Queries per 100 seconds"
        # See https://cloud.google.com/genomics/quotas for more information
        genomics-api-queries-per-100-seconds = 50000

        # Polling for completion backs-off gradually for slower-running jobs.
        # This is the maximum polling interval (in seconds):
        maximum-polling-interval = 30

        # Set the maximum number of jobs that PAPI will run at the same time to 75k. This throttle is currently required
        # to limit the amount of metadata published to the WriteMetadataActor. If the WriteMetadataActor backs up with
        # too many events to write to the database, the large amount of memory will produce GC thrashing. The increased
        # GC slows down the metadata flushing, backing up the WriteMetadataActor even more until Cromwell runs out of
        # memory.
        concurrent-job-limit = 10000

        genomics {
          # A reference to an auth defined in the `google` stanza at the top.  This auth is used to create
          # Pipelines and manipulate auth JSONs.
          auth = "service-account"

          // alternative service account to use on the launched compute instance
          // NOTE: If combined with service account authorization, both that serivce account and this service account
          // must be able to read and write to the 'root' GCS path
          // compute-service-account = "default"

          # Endpoint for APIs, no reason to change this unless directed by Google.
          endpoint-url = "https://genomics.googleapis.com/"

          # Restrict access to VM metadata. Useful in cases when untrusted containers are running under a service
          # account not owned by the submitting user
          restrict-metadata-access = false
          
          # This configuration means that files larger than 150Mb will be delocalized to a bucket using the parallel-composite-threshold flag on gsutil.
          # To read about parallel composite uploads: https://cloud.google.com/storage/docs/composite-objects
          # To read more about configuration details in Cromwell: More docs here https://cromwell.readthedocs.io/en/stable/backends/Google/#parallel-composite-uploads
          parallel-composite-upload-threshold = 150M
        }
     
        batch-requests {
          timeouts {
            read = 120 seconds
            connect = 120 seconds
          }
        }

       filesystems {
          gcs {
            # A reference to a potentially different auth for manipulating files via engine functions.
            auth = "service-account"
          }
        }

        memory-retry {
           error-keys = ["OutOfMemoryError", "Killed"]
           multiplier = 2.0
        }
      }
    }
  }
}

google {
  application-name = "cromwell"
  auths = [
    {
      name = "service-account"
      scheme = "service_account"
      json-file = "/etc/cromwell-account.json"
    },
  ]
}

engine {
  filesystems {
    local {
        enabled: true
    },
    gcs {
      auth = "service-account"
    }
  }
}
